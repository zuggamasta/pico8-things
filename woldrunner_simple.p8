pico-8 cartridge // http://www.pico-8.com
version 38
__lua__
n = 0

px = 64
py = 64
dx = 0
dy = 0
max_dx =4

jumping = false
falling = false
ground_level = 96

jump_legnth = 0
jump_length_init = 6

function _init()
	jump_legnth = jump_length_init

	poke(0x5f38, 2)
	poke(0x5f39, 2)
end


function _update()
	n+=1
	playerUpdate()
	
end

function playerUpdate()

	if (btnp(2) and (not jumping) and (not falling)) then
		jumping = true
	end

	if(not jumping and py < ground_level) then
		falling = true
	end

	if(falling) then
		dy +=1 
	end

	if(jumping) then 
		dy -= 1
		jump_legnth -= 1
	end

	if(jump_legnth <= 0) then
		jumping = false
		jump_legnth = jump_length_init
	end
	
	if(py >= ground_level and not jumping) then
		falling = false
		dy = 0
		py = ground_level
	end

	py +=dy
	
	if (py > ground_level) then py = ground_level end


	if(btn(1)) then dx+=1 end
	if(btn(0)) then dx-=1 end

	if(dx >= max_dx ) then dx = max_dx end
	if(dx <= -max_dx) then dx = -max_dx end

	if(not jumping) then 
		dx = dx/1.33
	end

	px += dx

	if(px >= 128 ) then 
		px = 128 
		dx = 0
	end

	if(px <= 0 ) then 
		px = 0 
		dx = 0
	end




end


function _draw()
	
	cls(6)

--	d_world(64,128,64,9)
--	d_world(0,128,64,9)
	rectfill(0,0,128,64,12)

	drawmapnew(4+dx/20,1,(time()*2)%4,0)
	drawmapnew(4+dx/20,1,(time()*2)%4-4,0)
	drawmapnew(4+dx/20,1,(time()*2)%4-4,0)

	rectfill(0,65,128,65,6)
	rectfill(0,64,128,64,7)


	d_player()
	-- debug infos 
	if(falling) then print("falling", 1 ,1,7) end
	if(jumping) then print("jumping",1,8,7) end
	print(stat(1),1,15,7)

end

--draw world
function drawmapnew(cx,cy,cz,angle)
	
	local a= angle
	local ca,sa= cos(a),-sin(a)
	for ye=65,127 do
		--coords in world space
		local rz=(cy*64)/(ye-64)
		-- ground height
		local rx=rz*(0-64)/64
		local x,z =
		ca*rx+sa*rz+cx,
		-sa*rx+ca*rz+cz
		tline(0,ye,256,ye,
		-- u and v coordinates
		x,z,
		-- delta u and delta v coordinates
		ca*rz/64,-sa*rz/64)
	end
end

--draw player
function d_player()

	--flip sprite every x frames
	if(flr((n/6)%2)>0) then
		--draw 2x2 sprite block
		spr(
			flr((n/3)%2)*2
			,px,py,2,2,false)	
	else
		--draw 2x2 sprite block mirrored
		spr(
			flr((n/3)%2)*2
			,px,py,2,2,true)
	end
end


function d_world(offset, width, center, tiles)
	--calculate repeating world y position, added offset param for seamless loop
	
	world_y = n%64 + 64 - offset


	--draw map via tline() from top to bottom
	for i = 0, 512 do 
		 
		x0t = 0
		y0t = world_y+i
		x1t = 128
		y1t = world_y+i
		mx = 0
		my = i/ tiles
		newwidth = width + i +world_y

		mxd = tiles/newwidth
		myd = 0
		tline(x0t,y0t,x1t,y1t,mx,my,mxd,myd)
	end
end
	

__gfx__
00000033330000000000003333000000999999993333333355555555000000000000000000000000000000000000000000000000000000000000000000000000
000003333330000000000333333000009ffff9993bbbb33355555555000000000000000000000000000000000000000000000000000000000000000000000000
000003333330000000000333333000009fff99f93bbb33b355555555000000000000000000000000000000000000000000000000000000000000000000000000
000003333330000000000333333000009ff99ff93bb33bb355555555000000000000000000000000000000000000000000000000000000000000000000000000
0000003bb30bb0000000003bb30000009f99fff93b33bbb355555555000000000000000000000000000000000000000000000000000000000000000000000000
0000b3bbbb3bb0000000b3bbbb3b0000999ffff9333bbbb355555555000000000000000000000000000000000000000000000000000000000000000000000000
000bb3bbbb3b0000000bb3bbbb3bb00099fffff933bbbbb355555555000000000000000000000000000000000000000000000000000000000000000000000000
00bb003330000000000f0033300f0000999999993333333355555555000000000000000000000000000000000000000000000000000000000000000000000000
0fb00bbbbbb0000000000bbbbbb00000111111112222222200000000000000000000000000000000000000000000000000000000000000000000000000000000
00000bbbbbb0000000000bbbbbbb00001cccc1112888822200000000000000000000000000000000000000000000000000000000000000000000000000000000
0000bbb0bbb000000000bbb00bbb00001ccc11c12888228200000000000000000000000000000000000000000000000000000000000000000000000000000000
0000bbb0bbb000000000bbb0003000001cc11cc12882288200000000000000000000000000000000000000000000000000000000000000000000000000000000
00000330b330000000000330003300001c11ccc12822888200000000000000000000000000000000000000000000000000000000000000000000000000000000
000033300bb000000000033000000000111cccc12228888200000000000000000000000000000000000000000000000000000000000000000000000000000000
0000330000000000000033000000000011ccccc12288888200000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000111111112222222200000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
